name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - "release/*"
  workflow_dispatch:

jobs:
  release-builds:
    name: build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - arm-unknown-linux-musleabihf
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: "8.6.11"
      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: pnpm
          cache-dependency-path: tracker/pnpm-lock.yaml
      - name: Install tracker deps
        run: pnpm install
        working-directory: tracker
      - name: Build tracker
        run: pnpm build
        working-directory: tracker
      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Debugging the tracker build
        run: find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
      - name: Get final build
        run: cross build --release --target ${{ matrix.target }}
        working-directory: service
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ferrite-${{ matrix.target }}
          path: service/target/${{ matrix.target }}/release/ferrite*

  compile-release:
    name: Compile release
    runs-on: ubuntu-latest
    needs: [release-builds]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Calculate version
        id: version
        run: |
          VERSION=$(echo ${{ github.ref_name }} | sed -E 's/^release[/](.*)$/\1/')
          echo version=${VERSION} | tee -a "$GITHUB_OUTPUT"
        # Downloaded artifacts are put into awkward folders, and they lose their permissions.
        # So let's collect them into a single directory and mark them as executable.
      - name: Collect downloaded artifacts
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mkdir -p release-artifacts
          cp ferrite-aarch64-unknown-linux-musl/ferrite release-artifacts/ferrite.${VERSION}.linux-aarch64
          cp ferrite-arm-unknown-linux-musleabihf/ferrite release-artifacts/ferrite.${VERSION}.linux-armv6
          cp ferrite-armv7-unknown-linux-musleabihf/ferrite release-artifacts/ferrite.${VERSION}.linux-armv7
          cp ferrite-x86_64-pc-windows-gnu/ferrite.exe release-artifacts/ferrite.${VERSION}.windows-x86_64.exe
          cp ferrite-x86_64-unknown-linux-musl/ferrite release-artifacts/ferrite.${VERSION}.linux-x86_64
          chmod +x release-artifacts/*
        # Sign the artifacts! Ensures any downloaded artifacts came from this build process.
      - name: Sign and prepare artifacts
        run: |
          echo "${SIGNING_PRIVATE_KEY}" | gpg --import -

          cd release-artifacts
          for file in * ; do
            gpg --detach-sign "$file"
          done

          for file in *.linux-* ; do
            tar -acf "${file}.tar.xz" "$file"
          done
          for file in *.windows-* ; do
            zip "${file}.zip" "$file"
          done
        env:
          SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
        # Create a draft release. The description can be manually created afterwards.
      - name: Make release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-artifacts/*.tar.xz,release-artifacts/*.zip,release-artifacts/*.sig
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          allowUpdates: true
          updateOnlyUnreleased: true
          removeArtifacts: true
          commit: ${{ github.ref_name }}
          tag: release/${{ steps.version.outputs.version }}
      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: seriousbug
          password: ${{ secrets.DOCKERHUB_PASS }}
      - name: Log in to the Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: SeriousBug
          password: ${{ secrets.GITHUB_TOKEN }}
        # We need to put the binaries into specific folders then run the docker build with buildx
      - name: Prepare to build docker images
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mkdir -p Docker/binaries/linux/amd64 Docker/binaries/linux/arm64 Docker/binaries/linux/arm/v6 Docker/binaries/linux/arm/v7
          cd Docker
          cp ../release-artifacts/ferrite-analytics.${VERSION}.linux-aarch64 binaries/linux/arm64/ferrite-analytics
          cp ../release-artifacts/ferrite-analytics.${VERSION}.linux-armv6 binaries/linux/arm/v6/ferrite-analytics
          cp ../release-artifacts/ferrite-analytics.${VERSION}.linux-armv7 binaries/linux/arm/v7/ferrite-analytics
          cp ../release-artifacts/ferrite-analytics.${VERSION}.linux-x86_64 binaries/linux/amd64/ferrite-analytics
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker images
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          push: true
          tags: seriousbug/ferrite-analytics:latest,seriousbug/ferrite-analytics:${{ steps.version.outputs.version }},ghcr.io/ferrite-analytics/ferrite-analytics:latest,ghcr.io/ferrite-analytics/ferrite-analytics:${{ steps.version.outputs.version }}
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          context: ./Docker
